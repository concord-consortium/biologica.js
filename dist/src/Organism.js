// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  BioLogica.Organism = (function() {

    function Organism(species, alleles, sex) {
      var _ref, _ref1;
      this.species = species;
      this.alleles = alleles;
      this.sex = sex;
      this.genetics = new BioLogica.Genetics(this.species, this.alleles, this.sex);
      if ((_ref = this.sex) == null) {
        this.sex = ((_ref1 = this.genetics.genotype.chromosomes.XY) != null ? _ref1.y : void 0) != null ? BioLogica.MALE : BioLogica.FEMALE;
      }
      this.phenotype = new BioLogica.Phenotype(this.genetics);
    }

    Organism.prototype.getGenotype = function() {
      return this.genetics.genotype;
    };

    /*
        For a given trait (a species-level property), returns this organism's
        characteristic. E.g. getCharacteristic("color") may return "green",
        getCharacteristic("horns") may return "no horns".
    */


    Organism.prototype.getCharacteristic = function(trait) {
      return this.phenotype.characteristics[trait];
    };

    Organism.prototype.getImageName = function() {
      return this.species.getImageName(this);
    };

    /*
        Creates n gametes, using crossover during meiosis by default .
        If only one gamete is requested, that gamete will be returned. Otherwise an
        array of gametes will be returned
    */


    Organism.prototype.createGametes = function(n, performCrossover) {
      var gametes, i, _i, _ref;
      if (performCrossover == null) {
        performCrossover = true;
      }
      gametes = [];
      for (i = _i = 0, _ref = Math.floor(n / 4); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        gametes = gametes.concat(this.genetics.performMeiosis(performCrossover));
      }
      gametes = gametes.concat(this.genetics.performMeiosis(performCrossover).slice(0, n % 4));
      if (gametes.length === 1) {
        return gametes[0];
      } else {
        return gametes;
      }
    };

    Organism.prototype.toString = function() {
      var alleles, sex;
      sex = this.sex === BioLogica.FEMALE ? "female" : "male";
      alleles = this.genetics.genotype.allAlleles;
      return "Organism: {sex: " + sex + ", authored alleles: " + this.alleles + ", alleles: " + alleles;
    };

    return Organism;

  })();

  BioLogica.Organism.createOrganismFromGametes = function(species, motherGamete, fatherGamete) {
    var chromatidA, chromatidB, chromoName, chromosome, genotypeHash, i;
    for (i in fatherGamete) {
      chromosome = fatherGamete[i];
      if (chromosome.side === "a") {
        chromosome.side = "b";
      }
    }
    if (fatherGamete["XY"].side === "x") {
      motherGamete["XY"].side = "x1";
      fatherGamete["XY"].side = "x2";
    }
    genotypeHash = {};
    for (chromoName in motherGamete) {
      if (!__hasProp.call(motherGamete, chromoName)) continue;
      chromatidA = motherGamete[chromoName];
      chromatidB = fatherGamete[chromoName];
      genotypeHash[chromoName] = {};
      genotypeHash[chromoName][chromatidA.side] = chromatidA.alleles;
      genotypeHash[chromoName][chromatidB.side] = chromatidB.alleles;
    }
    return new BioLogica.Organism(species, genotypeHash);
  };

}).call(this);
