// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BioLogica.Genetics = (function() {

    function Genetics(species, sex, alleles) {
      var genotypeHash;
      this.species = species;
      this.sex = sex;
      this.alleles = alleles;
      genotypeHash = this.alleles ? typeof this.alleles === "string" ? this.convertAlleleStringToGenotypeHash(this.alleles) : this.alleles : {};
      this.topUpChromosomes(genotypeHash);
      this.genotype = new BioLogica.Genotype(this.sex, genotypeHash);
      this.characteristics = this.getCharacteristics(this.genotype);
    }

    /*
        Converts an alleleString to a genotype hash
        e.g. convertAlleleStringToChromosomes("a:t,b:t,a:h,b:H,a:Dl") =>
          {"1": {a: ["t"], b: ["t"]}, "2": {a: ["h"], b: ["H"]}, "XY": {a: ["Dl"]}}
    */


    Genetics.prototype.convertAlleleStringToGenotypeHash = function(alleleString) {
      var allele, alleles, chromoName, genotypeHash, side, split, _i, _j, _len, _len1, _ref;
      split = BioLogica.Genetics.parseAlleleString(alleleString);
      genotypeHash = {};
      _ref = this.species.chromosomeNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chromoName = _ref[_i];
        genotypeHash[chromoName] = {
          a: [],
          b: []
        };
      }
      for (side in split) {
        if (!__hasProp.call(split, side)) continue;
        alleles = split[side];
        if (!alleles) {
          continue;
        }
        for (_j = 0, _len1 = alleles.length; _j < _len1; _j++) {
          allele = alleles[_j];
          chromoName = this.findChromosome(allele);
          genotypeHash[chromoName][side].push(allele);
        }
      }
      return genotypeHash;
    };

    /*
        "tops-up" the chromosomes: fills in any missing genes with random alleles
    */


    Genetics.prototype.topUpChromosomes = function(genotypeHash) {
      var chromosome, gene, genes, _base, _base1, _ref, _ref1, _ref2, _ref3, _results;
      _ref = this.species.chromosomeGeneMap;
      _results = [];
      for (chromosome in _ref) {
        if (!__hasProp.call(_ref, chromosome)) continue;
        genes = _ref[chromosome];
        if ((_ref1 = genotypeHash[chromosome]) == null) {
          genotypeHash[chromosome] = {};
        }
        if ((_ref2 = (_base = genotypeHash[chromosome]).a) == null) {
          _base.a = [];
        }
        if ((_ref3 = (_base1 = genotypeHash[chromosome]).b) == null) {
          _base1.b = [];
        }
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = genes.length; _i < _len; _i++) {
            gene = genes[_i];
            if (!this.chromosomeContainsGene(genotypeHash[chromosome].a, gene)) {
              genotypeHash[chromosome].a.push(this.getRandomAllele(gene));
            }
            if (!this.chromosomeContainsGene(genotypeHash[chromosome].b, gene)) {
              _results1.push(genotypeHash[chromosome].b.push(this.getRandomAllele(gene)));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    /*
        Returns true if the allele passed is a member of the gene, where the
        gene is indeicated by an example allele.
        isAlleleOfGene("dl", "D") => true
        isAlleleOfGene("rh", "D") => false
    */


    Genetics.prototype.isAlleleOfGene = function(allele, exampleOfGene) {
      var allelesOfGene, gene, _ref;
      _ref = this.species.geneList;
      for (gene in _ref) {
        if (!__hasProp.call(_ref, gene)) continue;
        allelesOfGene = this.species.geneList[gene];
        if (__indexOf.call(allelesOfGene, allele) >= 0 && __indexOf.call(allelesOfGene, exampleOfGene) >= 0) {
          return true;
        }
      }
      return false;
    };

    /*
        Finds the chromosome that a given allele is part of
    */


    Genetics.prototype.findChromosome = function(allele) {
      var chromosome, gene, genes, _i, _len, _ref;
      _ref = this.species.chromosomeGeneMap;
      for (chromosome in _ref) {
        genes = _ref[chromosome];
        for (_i = 0, _len = genes.length; _i < _len; _i++) {
          gene = genes[_i];
          if (this.isAlleleOfGene(allele, gene)) {
            return chromosome;
          }
        }
      }
      return false;
    };

    /*
        Returns true if chromosome array contains any allele of the gene
    */


    Genetics.prototype.chromosomeContainsGene = function(chromosome, exampleOfGene) {
      var allele, _i, _len;
      for (_i = 0, _len = chromosome.length; _i < _len; _i++) {
        allele = chromosome[_i];
        if (this.isAlleleOfGene(allele, exampleOfGene)) {
          return true;
        }
      }
      return false;
    };

    /*
        Returns random allele of the gene
    */


    Genetics.prototype.getRandomAllele = function(exampleOfGene) {
      var allelesOfGene, gene, rand, _allelesOfGene, _ref;
      _ref = this.species.geneList;
      for (gene in _ref) {
        if (!__hasProp.call(_ref, gene)) continue;
        _allelesOfGene = this.species.geneList[gene];
        if (__indexOf.call(_allelesOfGene, exampleOfGene) >= 0) {
          allelesOfGene = _allelesOfGene;
          break;
        }
      }
      rand = Math.floor(Math.random() * allelesOfGene.length);
      return allelesOfGene[rand];
    };

    /*
        Given an array of alleles and an array of genes, filter the alleles to return only
        those alleles that are included in the array of genes.
        filter(["Tk", "m", "W", "dl"], ["T", "D"]) => ["Tk", "dl"]
    */


    Genetics.prototype.filter = function(alleles, filter) {
      var _this = this;
      return alleles.filter(function(allele) {
        var gene, _i, _len;
        for (_i = 0, _len = filter.length; _i < _len; _i++) {
          gene = filter[_i];
          if (_this.isAlleleOfGene(allele, gene)) {
            return true;
          }
        }
        return false;
      });
    };

    /*
        Given a genotype object, generate the hash of characteristics
    */


    Genetics.prototype.getCharacteristics = function(genotype) {
      var alleles, characteristics, possibleAlleles, possibleCharacteristic, possibleCharacteristics, trait, _i, _len, _ref;
      characteristics = {};
      _ref = this.species.traitRules;
      for (trait in _ref) {
        if (!__hasProp.call(_ref, trait)) continue;
        possibleCharacteristics = _ref[trait];
        for (possibleCharacteristic in possibleCharacteristics) {
          if (!__hasProp.call(possibleCharacteristics, possibleCharacteristic)) continue;
          possibleAlleles = possibleCharacteristics[possibleCharacteristic];
          for (_i = 0, _len = possibleAlleles.length; _i < _len; _i++) {
            alleles = possibleAlleles[_i];
            if (genotype.containsAlleles(alleles)) {
              characteristics[trait] = possibleCharacteristic;
              break;
            }
          }
          if (characteristics[trait]) {
            break;
          }
        }
      }
      return characteristics;
    };

    return Genetics;

  })();

  /* Class methods (non-instance)
  */


  /*
    Parses the original Java BioLogica allele format and returns an object with a and
    b representing the alleles on each side.
    parseAlleleString("a:h,b:H,a:t,b:t,a:Dl,b:D") =>
      { a: ["h", "t", "Dl"], b: ["H", "t", "D"] }
  */


  BioLogica.Genetics.parseAlleleString = function(alleleString) {
    var _ref, _ref1;
    return {
      a: (_ref = alleleString.match(/a:([^,])*/g)) != null ? _ref.map(function(short) {
        return short.match(/[^:]+$/)[0];
      }) : void 0,
      b: (_ref1 = alleleString.match(/b:([^,])*/g)) != null ? _ref1.map(function(short) {
        return short.match(/[^:]+$/)[0];
      }) : void 0
    };
  };

}).call(this);
